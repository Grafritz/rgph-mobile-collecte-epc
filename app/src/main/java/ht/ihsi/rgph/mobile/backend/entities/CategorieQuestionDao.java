package ht.ihsi.rgph.mobile.backend.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.mobile.backend.entities.CategorieQuestion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_categorie_question".
*/
public class CategorieQuestionDao extends AbstractDao<CategorieQuestion, Void> {

    public static final String TABLENAME = "tbl_categorie_question";

    /**
     * Properties of entity CategorieQuestion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CodeCategorie = new Property(0, String.class, "codeCategorie", false, "codeCategorie");
        public final static Property CategorieQuestion = new Property(1, String.class, "categorieQuestion", false, "categorieQuestion");
        public final static Property DetailsCategorie = new Property(2, String.class, "detailsCategorie", false, "detailsCategorie");
        public final static Property SousDetailsCategorie = new Property(3, String.class, "sousDetailsCategorie", false, "sousDetailsCategorie");
    };


    public CategorieQuestionDao(DaoConfig config) {
        super(config);
    }
    
    public CategorieQuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_categorie_question\" (" + //
                "\"codeCategorie\" TEXT NOT NULL UNIQUE ," + // 0: codeCategorie
                "\"categorieQuestion\" TEXT NOT NULL ," + // 1: categorieQuestion
                "\"detailsCategorie\" TEXT," + // 2: detailsCategorie
                "\"sousDetailsCategorie\" TEXT);"); // 3: sousDetailsCategorie
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_categorie_question\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CategorieQuestion entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCodeCategorie());
        stmt.bindString(2, entity.getCategorieQuestion());
 
        String detailsCategorie = entity.getDetailsCategorie();
        if (detailsCategorie != null) {
            stmt.bindString(3, detailsCategorie);
        }
 
        String sousDetailsCategorie = entity.getSousDetailsCategorie();
        if (sousDetailsCategorie != null) {
            stmt.bindString(4, sousDetailsCategorie);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CategorieQuestion readEntity(Cursor cursor, int offset) {
        CategorieQuestion entity = new CategorieQuestion( //
            cursor.getString(offset + 0), // codeCategorie
            cursor.getString(offset + 1), // categorieQuestion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // detailsCategorie
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // sousDetailsCategorie
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CategorieQuestion entity, int offset) {
        entity.setCodeCategorie(cursor.getString(offset + 0));
        entity.setCategorieQuestion(cursor.getString(offset + 1));
        entity.setDetailsCategorie(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSousDetailsCategorie(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CategorieQuestion entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CategorieQuestion entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
