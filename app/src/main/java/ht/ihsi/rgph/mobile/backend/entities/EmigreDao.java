package ht.ihsi.rgph.mobile.backend.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.mobile.backend.entities.Emigre;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_emigre".
*/
public class EmigreDao extends AbstractDao<Emigre, Long> {

    public static final String TABLENAME = "tbl_emigre";

    /**
     * Properties of entity Emigre.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property EmigreId = new Property(0, Long.class, "emigreId", true, "emigreId");
        public final static Property MenageId = new Property(1, Long.class, "menageId", false, "menageId");
        public final static Property LogeId = new Property(2, Long.class, "logeId", false, "logeId");
        public final static Property BatimentId = new Property(3, Long.class, "batimentId", false, "batimentId");
        public final static Property SdeId = new Property(4, String.class, "sdeId", false, "sdeId");
        public final static Property Qn1numeroOrdre = new Property(5, Short.class, "qn1numeroOrdre", false, "qn1numeroOrdre");
        public final static Property Qn2aNomComplet = new Property(6, String.class, "qn2aNomComplet", false, "qn2aNomComplet");
        public final static Property Qn2bSexe = new Property(7, Short.class, "qn2bSexe", false, "qn2bSexe");
        public final static Property Qn2cAgeAuMomentDepart = new Property(8, String.class, "qn2cAgeAuMomentDepart", false, "qn2cAgeAuMomentDepart");
        public final static Property Qn2dVivantToujours = new Property(9, Short.class, "qn2dVivantToujours", false, "qn2dVivantToujours");
        public final static Property Qn2eDernierPaysResidence = new Property(10, Short.class, "qn2eDernierPaysResidence", false, "qn2eDernierPaysResidence");
        public final static Property Statut = new Property(11, Short.class, "statut", false, "statut");
        public final static Property IsFieldAllFilled = new Property(12, Boolean.class, "isFieldAllFilled", false, "isFieldAllFilled");
        public final static Property DateDebutCollecte = new Property(13, String.class, "dateDebutCollecte", false, "dateDebutCollecte");
        public final static Property DateFinCollecte = new Property(14, String.class, "dateFinCollecte", false, "dateFinCollecte");
        public final static Property DureeSaisie = new Property(15, Integer.class, "dureeSaisie", false, "dureeSaisie");
        public final static Property CodeAgentRecenceur = new Property(16, String.class, "codeAgentRecenceur", false, "codeAgentRecenceur");
        public final static Property IsVerified = new Property(17, Boolean.class, "isVerified", false, "isVerified");
    };


    public EmigreDao(DaoConfig config) {
        super(config);
    }
    
    public EmigreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_emigre\" (" + //
                "\"emigreId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: emigreId
                "\"menageId\" INTEGER," + // 1: menageId
                "\"logeId\" INTEGER," + // 2: logeId
                "\"batimentId\" INTEGER," + // 3: batimentId
                "\"sdeId\" TEXT," + // 4: sdeId
                "\"qn1numeroOrdre\" INTEGER," + // 5: qn1numeroOrdre
                "\"qn2aNomComplet\" TEXT," + // 6: qn2aNomComplet
                "\"qn2bSexe\" INTEGER," + // 7: qn2bSexe
                "\"qn2cAgeAuMomentDepart\" TEXT," + // 8: qn2cAgeAuMomentDepart
                "\"qn2dVivantToujours\" INTEGER," + // 9: qn2dVivantToujours
                "\"qn2eDernierPaysResidence\" INTEGER," + // 10: qn2eDernierPaysResidence
                "\"statut\" INTEGER," + // 11: statut
                "\"isFieldAllFilled\" INTEGER," + // 12: isFieldAllFilled
                "\"dateDebutCollecte\" TEXT," + // 13: dateDebutCollecte
                "\"dateFinCollecte\" TEXT," + // 14: dateFinCollecte
                "\"dureeSaisie\" INTEGER," + // 15: dureeSaisie
                "\"codeAgentRecenceur\" TEXT," + // 16: codeAgentRecenceur
                "\"isVerified\" INTEGER);"); // 17: isVerified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_emigre\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Emigre entity) {
        stmt.clearBindings();
 
        Long emigreId = entity.getEmigreId();
        if (emigreId != null) {
            stmt.bindLong(1, emigreId);
        }
 
        Long menageId = entity.getMenageId();
        if (menageId != null) {
            stmt.bindLong(2, menageId);
        }
 
        Long logeId = entity.getLogeId();
        if (logeId != null) {
            stmt.bindLong(3, logeId);
        }
 
        Long batimentId = entity.getBatimentId();
        if (batimentId != null) {
            stmt.bindLong(4, batimentId);
        }
 
        String sdeId = entity.getSdeId();
        if (sdeId != null) {
            stmt.bindString(5, sdeId);
        }
 
        Short qn1numeroOrdre = entity.getQn1numeroOrdre();
        if (qn1numeroOrdre != null) {
            stmt.bindLong(6, qn1numeroOrdre);
        }
 
        String qn2aNomComplet = entity.getQn2aNomComplet();
        if (qn2aNomComplet != null) {
            stmt.bindString(7, qn2aNomComplet);
        }
 
        Short qn2bSexe = entity.getQn2bSexe();
        if (qn2bSexe != null) {
            stmt.bindLong(8, qn2bSexe);
        }
 
        String qn2cAgeAuMomentDepart = entity.getQn2cAgeAuMomentDepart();
        if (qn2cAgeAuMomentDepart != null) {
            stmt.bindString(9, qn2cAgeAuMomentDepart);
        }
 
        Short qn2dVivantToujours = entity.getQn2dVivantToujours();
        if (qn2dVivantToujours != null) {
            stmt.bindLong(10, qn2dVivantToujours);
        }
 
        Short qn2eDernierPaysResidence = entity.getQn2eDernierPaysResidence();
        if (qn2eDernierPaysResidence != null) {
            stmt.bindLong(11, qn2eDernierPaysResidence);
        }
 
        Short statut = entity.getStatut();
        if (statut != null) {
            stmt.bindLong(12, statut);
        }
 
        Boolean isFieldAllFilled = entity.getIsFieldAllFilled();
        if (isFieldAllFilled != null) {
            stmt.bindLong(13, isFieldAllFilled ? 1L: 0L);
        }
 
        String dateDebutCollecte = entity.getDateDebutCollecte();
        if (dateDebutCollecte != null) {
            stmt.bindString(14, dateDebutCollecte);
        }
 
        String dateFinCollecte = entity.getDateFinCollecte();
        if (dateFinCollecte != null) {
            stmt.bindString(15, dateFinCollecte);
        }
 
        Integer dureeSaisie = entity.getDureeSaisie();
        if (dureeSaisie != null) {
            stmt.bindLong(16, dureeSaisie);
        }
 
        String codeAgentRecenceur = entity.getCodeAgentRecenceur();
        if (codeAgentRecenceur != null) {
            stmt.bindString(17, codeAgentRecenceur);
        }
 
        Boolean isVerified = entity.getIsVerified();
        if (isVerified != null) {
            stmt.bindLong(18, isVerified ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Emigre readEntity(Cursor cursor, int offset) {
        Emigre entity = new Emigre( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // emigreId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // menageId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // logeId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // batimentId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sdeId
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5), // qn1numeroOrdre
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // qn2aNomComplet
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7), // qn2bSexe
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // qn2cAgeAuMomentDepart
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9), // qn2dVivantToujours
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10), // qn2eDernierPaysResidence
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11), // statut
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isFieldAllFilled
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // dateDebutCollecte
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // dateFinCollecte
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // dureeSaisie
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // codeAgentRecenceur
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0 // isVerified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Emigre entity, int offset) {
        entity.setEmigreId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMenageId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLogeId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBatimentId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSdeId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQn1numeroOrdre(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
        entity.setQn2aNomComplet(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQn2bSexe(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7));
        entity.setQn2cAgeAuMomentDepart(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQn2dVivantToujours(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9));
        entity.setQn2eDernierPaysResidence(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10));
        entity.setStatut(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11));
        entity.setIsFieldAllFilled(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setDateDebutCollecte(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDateFinCollecte(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDureeSaisie(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setCodeAgentRecenceur(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsVerified(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Emigre entity, long rowId) {
        entity.setEmigreId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Emigre entity) {
        if(entity != null) {
            return entity.getEmigreId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
