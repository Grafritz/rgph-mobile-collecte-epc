package ht.ihsi.rgph.mobile.epc.backend.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.mobile.epc.backend.entities.AncienMembre;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_AncienMembre".
*/
public class AncienMembreDao extends AbstractDao<AncienMembre, Long> {

    public static final String TABLENAME = "tbl_AncienMembre";

    /**
     * Properties of entity AncienMembre.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AncienMembreId = new Property(0, Long.class, "ancienMembreId", true, "ancienMembreId");
        public final static Property MenageId = new Property(1, Long.class, "menageId", false, "menageId");
        public final static Property LogeId = new Property(2, Long.class, "logeId", false, "logeId");
        public final static Property BatimentId = new Property(3, Long.class, "batimentId", false, "batimentId");
        public final static Property SdeId = new Property(4, String.class, "sdeId", false, "sdeId");
        public final static Property Q1NoOrdre = new Property(5, Short.class, "q1NoOrdre", false, "q1NoOrdre");
        public final static Property Qp2APrenom = new Property(6, String.class, "qp2APrenom", false, "qp2APrenom");
        public final static Property Qp2BNom = new Property(7, String.class, "qp2BNom", false, "qp2BNom");
        public final static Property Qp4Sexe = new Property(8, Short.class, "qp4Sexe", false, "qp4Sexe");
        public final static Property Q5EstMortOuQuitter = new Property(9, Short.class, "q5EstMortOuQuitter", false, "q5EstMortOuQuitter");
        public final static Property Q6HabiteDansMenage = new Property(10, Short.class, "q6HabiteDansMenage", false, "q6HabiteDansMenage");
        public final static Property Q7DateQuitterMenageJour = new Property(11, Short.class, "q7DateQuitterMenageJour", false, "q7DateQuitterMenageJour");
        public final static Property Q7DateQuitterMenageMois = new Property(12, Short.class, "q7DateQuitterMenageMois", false, "q7DateQuitterMenageMois");
        public final static Property Q7DateQuitterMenageAnnee = new Property(13, Integer.class, "q7DateQuitterMenageAnnee", false, "q7DateQuitterMenageAnnee");
        public final static Property Q7bDateMouriJour = new Property(14, Short.class, "q7bDateMouriJour", false, "q7bDateMouriJour");
        public final static Property Q7bDateMouriMois = new Property(15, Short.class, "q7bDateMouriMois", false, "q7bDateMouriMois");
        public final static Property Q7bDateMouriAnnee = new Property(16, Integer.class, "q7bDateMouriAnnee", false, "q7bDateMouriAnnee");
        public final static Property Q8DateNaissanceJour = new Property(17, Short.class, "q8DateNaissanceJour", false, "q8DateNaissanceJour");
        public final static Property Q8DateNaissanceMois = new Property(18, Short.class, "q8DateNaissanceMois", false, "q8DateNaissanceMois");
        public final static Property Q8DateNaissanceAnnee = new Property(19, Integer.class, "q8DateNaissanceAnnee", false, "q8DateNaissanceAnnee");
        public final static Property Q9Age = new Property(20, Integer.class, "q9Age", false, "q9Age");
        public final static Property Q10LienDeParente = new Property(21, Short.class, "q10LienDeParente", false, "q10LienDeParente");
        public final static Property Q11Nationalite = new Property(22, Short.class, "q11Nationalite", false, "q11Nationalite");
        public final static Property Q11PaysNationalite = new Property(23, String.class, "q11PaysNationalite", false, "q11PaysNationalite");
        public final static Property Q12NiveauEtude = new Property(24, Short.class, "q12NiveauEtude", false, "q12NiveauEtude");
        public final static Property Q12StatutMatrimonial = new Property(25, Short.class, "q12StatutMatrimonial", false, "q12StatutMatrimonial");
        public final static Property Statut = new Property(26, Short.class, "statut", false, "statut");
        public final static Property IsValidated = new Property(27, Boolean.class, "isValidated", false, "isValidated");
        public final static Property IsFieldAllFilled = new Property(28, Boolean.class, "isFieldAllFilled", false, "isFieldAllFilled");
        public final static Property DateDebutCollecte = new Property(29, String.class, "dateDebutCollecte", false, "dateDebutCollecte");
        public final static Property DateFinCollecte = new Property(30, String.class, "dateFinCollecte", false, "dateFinCollecte");
        public final static Property DureeSaisie = new Property(31, Integer.class, "dureeSaisie", false, "dureeSaisie");
        public final static Property IsContreEnqueteMade = new Property(32, Boolean.class, "isContreEnqueteMade", false, "isContreEnqueteMade");
        public final static Property CodeAgentRecenceur = new Property(33, String.class, "codeAgentRecenceur", false, "codeAgentRecenceur");
        public final static Property IsVerified = new Property(34, Boolean.class, "isVerified", false, "isVerified");
    };


    public AncienMembreDao(DaoConfig config) {
        super(config);
    }
    
    public AncienMembreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_AncienMembre\" (" + //
                "\"ancienMembreId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ancienMembreId
                "\"menageId\" INTEGER," + // 1: menageId
                "\"logeId\" INTEGER," + // 2: logeId
                "\"batimentId\" INTEGER," + // 3: batimentId
                "\"sdeId\" TEXT," + // 4: sdeId
                "\"q1NoOrdre\" INTEGER," + // 5: q1NoOrdre
                "\"qp2APrenom\" TEXT," + // 6: qp2APrenom
                "\"qp2BNom\" TEXT," + // 7: qp2BNom
                "\"qp4Sexe\" INTEGER," + // 8: qp4Sexe
                "\"q5EstMortOuQuitter\" INTEGER," + // 9: q5EstMortOuQuitter
                "\"q6HabiteDansMenage\" INTEGER," + // 10: q6HabiteDansMenage
                "\"q7DateQuitterMenageJour\" INTEGER," + // 11: q7DateQuitterMenageJour
                "\"q7DateQuitterMenageMois\" INTEGER," + // 12: q7DateQuitterMenageMois
                "\"q7DateQuitterMenageAnnee\" INTEGER," + // 13: q7DateQuitterMenageAnnee
                "\"q7bDateMouriJour\" INTEGER," + // 14: q7bDateMouriJour
                "\"q7bDateMouriMois\" INTEGER," + // 15: q7bDateMouriMois
                "\"q7bDateMouriAnnee\" INTEGER," + // 16: q7bDateMouriAnnee
                "\"q8DateNaissanceJour\" INTEGER," + // 17: q8DateNaissanceJour
                "\"q8DateNaissanceMois\" INTEGER," + // 18: q8DateNaissanceMois
                "\"q8DateNaissanceAnnee\" INTEGER," + // 19: q8DateNaissanceAnnee
                "\"q9Age\" INTEGER," + // 20: q9Age
                "\"q10LienDeParente\" INTEGER," + // 21: q10LienDeParente
                "\"q11Nationalite\" INTEGER," + // 22: q11Nationalite
                "\"q11PaysNationalite\" TEXT," + // 23: q11PaysNationalite
                "\"q12NiveauEtude\" INTEGER," + // 24: q12NiveauEtude
                "\"q12StatutMatrimonial\" INTEGER," + // 25: q12StatutMatrimonial
                "\"statut\" INTEGER," + // 26: statut
                "\"isValidated\" INTEGER," + // 27: isValidated
                "\"isFieldAllFilled\" INTEGER," + // 28: isFieldAllFilled
                "\"dateDebutCollecte\" TEXT," + // 29: dateDebutCollecte
                "\"dateFinCollecte\" TEXT," + // 30: dateFinCollecte
                "\"dureeSaisie\" INTEGER," + // 31: dureeSaisie
                "\"isContreEnqueteMade\" INTEGER," + // 32: isContreEnqueteMade
                "\"codeAgentRecenceur\" TEXT," + // 33: codeAgentRecenceur
                "\"isVerified\" INTEGER);"); // 34: isVerified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_AncienMembre\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AncienMembre entity) {
        stmt.clearBindings();
 
        Long ancienMembreId = entity.getAncienMembreId();
        if (ancienMembreId != null) {
            stmt.bindLong(1, ancienMembreId);
        }
 
        Long menageId = entity.getMenageId();
        if (menageId != null) {
            stmt.bindLong(2, menageId);
        }
 
        Long logeId = entity.getLogeId();
        if (logeId != null) {
            stmt.bindLong(3, logeId);
        }
 
        Long batimentId = entity.getBatimentId();
        if (batimentId != null) {
            stmt.bindLong(4, batimentId);
        }
 
        String sdeId = entity.getSdeId();
        if (sdeId != null) {
            stmt.bindString(5, sdeId);
        }
 
        Short q1NoOrdre = entity.getQ1NoOrdre();
        if (q1NoOrdre != null) {
            stmt.bindLong(6, q1NoOrdre);
        }
 
        String qp2APrenom = entity.getQp2APrenom();
        if (qp2APrenom != null) {
            stmt.bindString(7, qp2APrenom);
        }
 
        String qp2BNom = entity.getQp2BNom();
        if (qp2BNom != null) {
            stmt.bindString(8, qp2BNom);
        }
 
        Short qp4Sexe = entity.getQp4Sexe();
        if (qp4Sexe != null) {
            stmt.bindLong(9, qp4Sexe);
        }
 
        Short q5EstMortOuQuitter = entity.getQ5EstMortOuQuitter();
        if (q5EstMortOuQuitter != null) {
            stmt.bindLong(10, q5EstMortOuQuitter);
        }
 
        Short q6HabiteDansMenage = entity.getQ6HabiteDansMenage();
        if (q6HabiteDansMenage != null) {
            stmt.bindLong(11, q6HabiteDansMenage);
        }
 
        Short q7DateQuitterMenageJour = entity.getQ7DateQuitterMenageJour();
        if (q7DateQuitterMenageJour != null) {
            stmt.bindLong(12, q7DateQuitterMenageJour);
        }
 
        Short q7DateQuitterMenageMois = entity.getQ7DateQuitterMenageMois();
        if (q7DateQuitterMenageMois != null) {
            stmt.bindLong(13, q7DateQuitterMenageMois);
        }
 
        Integer q7DateQuitterMenageAnnee = entity.getQ7DateQuitterMenageAnnee();
        if (q7DateQuitterMenageAnnee != null) {
            stmt.bindLong(14, q7DateQuitterMenageAnnee);
        }
 
        Short q7bDateMouriJour = entity.getQ7bDateMouriJour();
        if (q7bDateMouriJour != null) {
            stmt.bindLong(15, q7bDateMouriJour);
        }
 
        Short q7bDateMouriMois = entity.getQ7bDateMouriMois();
        if (q7bDateMouriMois != null) {
            stmt.bindLong(16, q7bDateMouriMois);
        }
 
        Integer q7bDateMouriAnnee = entity.getQ7bDateMouriAnnee();
        if (q7bDateMouriAnnee != null) {
            stmt.bindLong(17, q7bDateMouriAnnee);
        }
 
        Short q8DateNaissanceJour = entity.getQ8DateNaissanceJour();
        if (q8DateNaissanceJour != null) {
            stmt.bindLong(18, q8DateNaissanceJour);
        }
 
        Short q8DateNaissanceMois = entity.getQ8DateNaissanceMois();
        if (q8DateNaissanceMois != null) {
            stmt.bindLong(19, q8DateNaissanceMois);
        }
 
        Integer q8DateNaissanceAnnee = entity.getQ8DateNaissanceAnnee();
        if (q8DateNaissanceAnnee != null) {
            stmt.bindLong(20, q8DateNaissanceAnnee);
        }
 
        Integer q9Age = entity.getQ9Age();
        if (q9Age != null) {
            stmt.bindLong(21, q9Age);
        }
 
        Short q10LienDeParente = entity.getQ10LienDeParente();
        if (q10LienDeParente != null) {
            stmt.bindLong(22, q10LienDeParente);
        }
 
        Short q11Nationalite = entity.getQ11Nationalite();
        if (q11Nationalite != null) {
            stmt.bindLong(23, q11Nationalite);
        }
 
        String q11PaysNationalite = entity.getQ11PaysNationalite();
        if (q11PaysNationalite != null) {
            stmt.bindString(24, q11PaysNationalite);
        }
 
        Short q12NiveauEtude = entity.getQ12NiveauEtude();
        if (q12NiveauEtude != null) {
            stmt.bindLong(25, q12NiveauEtude);
        }
 
        Short q12StatutMatrimonial = entity.getQ12StatutMatrimonial();
        if (q12StatutMatrimonial != null) {
            stmt.bindLong(26, q12StatutMatrimonial);
        }
 
        Short statut = entity.getStatut();
        if (statut != null) {
            stmt.bindLong(27, statut);
        }
 
        Boolean isValidated = entity.getIsValidated();
        if (isValidated != null) {
            stmt.bindLong(28, isValidated ? 1L: 0L);
        }
 
        Boolean isFieldAllFilled = entity.getIsFieldAllFilled();
        if (isFieldAllFilled != null) {
            stmt.bindLong(29, isFieldAllFilled ? 1L: 0L);
        }
 
        String dateDebutCollecte = entity.getDateDebutCollecte();
        if (dateDebutCollecte != null) {
            stmt.bindString(30, dateDebutCollecte);
        }
 
        String dateFinCollecte = entity.getDateFinCollecte();
        if (dateFinCollecte != null) {
            stmt.bindString(31, dateFinCollecte);
        }
 
        Integer dureeSaisie = entity.getDureeSaisie();
        if (dureeSaisie != null) {
            stmt.bindLong(32, dureeSaisie);
        }
 
        Boolean isContreEnqueteMade = entity.getIsContreEnqueteMade();
        if (isContreEnqueteMade != null) {
            stmt.bindLong(33, isContreEnqueteMade ? 1L: 0L);
        }
 
        String codeAgentRecenceur = entity.getCodeAgentRecenceur();
        if (codeAgentRecenceur != null) {
            stmt.bindString(34, codeAgentRecenceur);
        }
 
        Boolean isVerified = entity.getIsVerified();
        if (isVerified != null) {
            stmt.bindLong(35, isVerified ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AncienMembre readEntity(Cursor cursor, int offset) {
        AncienMembre entity = new AncienMembre( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ancienMembreId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // menageId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // logeId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // batimentId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sdeId
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5), // q1NoOrdre
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // qp2APrenom
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qp2BNom
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8), // qp4Sexe
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9), // q5EstMortOuQuitter
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10), // q6HabiteDansMenage
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11), // q7DateQuitterMenageJour
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12), // q7DateQuitterMenageMois
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // q7DateQuitterMenageAnnee
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14), // q7bDateMouriJour
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15), // q7bDateMouriMois
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // q7bDateMouriAnnee
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17), // q8DateNaissanceJour
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18), // q8DateNaissanceMois
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // q8DateNaissanceAnnee
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // q9Age
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21), // q10LienDeParente
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22), // q11Nationalite
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // q11PaysNationalite
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24), // q12NiveauEtude
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25), // q12StatutMatrimonial
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26), // statut
            cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0, // isValidated
            cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0, // isFieldAllFilled
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // dateDebutCollecte
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // dateFinCollecte
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // dureeSaisie
            cursor.isNull(offset + 32) ? null : cursor.getShort(offset + 32) != 0, // isContreEnqueteMade
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // codeAgentRecenceur
            cursor.isNull(offset + 34) ? null : cursor.getShort(offset + 34) != 0 // isVerified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AncienMembre entity, int offset) {
        entity.setAncienMembreId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMenageId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLogeId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBatimentId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSdeId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQ1NoOrdre(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
        entity.setQp2APrenom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQp2BNom(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQp4Sexe(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8));
        entity.setQ5EstMortOuQuitter(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9));
        entity.setQ6HabiteDansMenage(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10));
        entity.setQ7DateQuitterMenageJour(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11));
        entity.setQ7DateQuitterMenageMois(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12));
        entity.setQ7DateQuitterMenageAnnee(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setQ7bDateMouriJour(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14));
        entity.setQ7bDateMouriMois(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15));
        entity.setQ7bDateMouriAnnee(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setQ8DateNaissanceJour(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17));
        entity.setQ8DateNaissanceMois(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18));
        entity.setQ8DateNaissanceAnnee(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setQ9Age(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setQ10LienDeParente(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21));
        entity.setQ11Nationalite(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22));
        entity.setQ11PaysNationalite(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setQ12NiveauEtude(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24));
        entity.setQ12StatutMatrimonial(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25));
        entity.setStatut(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26));
        entity.setIsValidated(cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0);
        entity.setIsFieldAllFilled(cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0);
        entity.setDateDebutCollecte(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setDateFinCollecte(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setDureeSaisie(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setIsContreEnqueteMade(cursor.isNull(offset + 32) ? null : cursor.getShort(offset + 32) != 0);
        entity.setCodeAgentRecenceur(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setIsVerified(cursor.isNull(offset + 34) ? null : cursor.getShort(offset + 34) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AncienMembre entity, long rowId) {
        entity.setAncienMembreId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AncienMembre entity) {
        if(entity != null) {
            return entity.getAncienMembreId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
