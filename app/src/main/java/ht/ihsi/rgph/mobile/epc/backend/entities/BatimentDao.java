package ht.ihsi.rgph.mobile.epc.backend.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.mobile.epc.backend.entities.Batiment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_batiment".
*/
public class BatimentDao extends AbstractDao<Batiment, Long> {

    public static final String TABLENAME = "tbl_batiment";

    /**
     * Properties of entity Batiment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BatimentId = new Property(0, Long.class, "batimentId", true, "batimentId");
        public final static Property DeptId = new Property(1, String.class, "deptId", false, "deptId");
        public final static Property ComId = new Property(2, String.class, "comId", false, "comId");
        public final static Property VqseId = new Property(3, String.class, "vqseId", false, "vqseId");
        public final static Property SdeId = new Property(4, String.class, "sdeId", false, "sdeId");
        public final static Property Zone = new Property(5, Short.class, "zone", false, "zone");
        public final static Property DisctrictId = new Property(6, String.class, "disctrictId", false, "disctrictId");
        public final static Property Qhabitation = new Property(7, String.class, "qhabitation", false, "qhabitation");
        public final static Property Qlocalite = new Property(8, String.class, "qlocalite", false, "qlocalite");
        public final static Property Qadresse = new Property(9, String.class, "qadresse", false, "qadresse");
        public final static Property Qrec = new Property(10, String.class, "qrec", false, "qrec");
        public final static Property Qepc = new Property(11, String.class, "qepc", false, "qepc");
        public final static Property Qb1Etat = new Property(12, Short.class, "qb1Etat", false, "qb1Etat");
        public final static Property Qb2Type = new Property(13, Short.class, "qb2Type", false, "qb2Type");
        public final static Property Qb3StatutOccupation = new Property(14, Short.class, "qb3StatutOccupation", false, "qb3StatutOccupation");
        public final static Property Qb4NbreLogeIndividuel = new Property(15, Short.class, "qb4NbreLogeIndividuel", false, "qb4NbreLogeIndividuel");
        public final static Property Statut = new Property(16, Short.class, "statut", false, "statut");
        public final static Property DateEnvoi = new Property(17, String.class, "dateEnvoi", false, "dateEnvoi");
        public final static Property IsValidated = new Property(18, Boolean.class, "isValidated", false, "isValidated");
        public final static Property IsSynchroToAppSup = new Property(19, Boolean.class, "isSynchroToAppSup", false, "isSynchroToAppSup");
        public final static Property IsSynchroToCentrale = new Property(20, Boolean.class, "isSynchroToCentrale", false, "isSynchroToCentrale");
        public final static Property DateDebutCollecte = new Property(21, String.class, "dateDebutCollecte", false, "dateDebutCollecte");
        public final static Property DateFinCollecte = new Property(22, String.class, "dateFinCollecte", false, "dateFinCollecte");
        public final static Property DureeSaisie = new Property(23, Integer.class, "dureeSaisie", false, "dureeSaisie");
        public final static Property IsFieldAllFilled = new Property(24, Boolean.class, "isFieldAllFilled", false, "isFieldAllFilled");
        public final static Property IsContreEnqueteMade = new Property(25, Boolean.class, "isContreEnqueteMade", false, "isContreEnqueteMade");
        public final static Property Latitude = new Property(26, String.class, "latitude", false, "latitude");
        public final static Property Longitude = new Property(27, String.class, "longitude", false, "longitude");
        public final static Property CodeAgentRecenceur = new Property(28, String.class, "codeAgentRecenceur", false, "codeAgentRecenceur");
        public final static Property IsVerified = new Property(29, Boolean.class, "isVerified", false, "isVerified");
    };


    public BatimentDao(DaoConfig config) {
        super(config);
    }
    
    public BatimentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_batiment\" (" + //
                "\"batimentId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: batimentId
                "\"deptId\" TEXT," + // 1: deptId
                "\"comId\" TEXT," + // 2: comId
                "\"vqseId\" TEXT," + // 3: vqseId
                "\"sdeId\" TEXT," + // 4: sdeId
                "\"zone\" INTEGER," + // 5: zone
                "\"disctrictId\" TEXT," + // 6: disctrictId
                "\"qhabitation\" TEXT," + // 7: qhabitation
                "\"qlocalite\" TEXT," + // 8: qlocalite
                "\"qadresse\" TEXT," + // 9: qadresse
                "\"qrec\" TEXT," + // 10: qrec
                "\"qepc\" TEXT," + // 11: qepc
                "\"qb1Etat\" INTEGER," + // 12: qb1Etat
                "\"qb2Type\" INTEGER," + // 13: qb2Type
                "\"qb3StatutOccupation\" INTEGER," + // 14: qb3StatutOccupation
                "\"qb4NbreLogeIndividuel\" INTEGER," + // 15: qb4NbreLogeIndividuel
                "\"statut\" INTEGER," + // 16: statut
                "\"dateEnvoi\" TEXT," + // 17: dateEnvoi
                "\"isValidated\" INTEGER," + // 18: isValidated
                "\"isSynchroToAppSup\" INTEGER," + // 19: isSynchroToAppSup
                "\"isSynchroToCentrale\" INTEGER," + // 20: isSynchroToCentrale
                "\"dateDebutCollecte\" TEXT," + // 21: dateDebutCollecte
                "\"dateFinCollecte\" TEXT," + // 22: dateFinCollecte
                "\"dureeSaisie\" INTEGER," + // 23: dureeSaisie
                "\"isFieldAllFilled\" INTEGER," + // 24: isFieldAllFilled
                "\"isContreEnqueteMade\" INTEGER," + // 25: isContreEnqueteMade
                "\"latitude\" TEXT," + // 26: latitude
                "\"longitude\" TEXT," + // 27: longitude
                "\"codeAgentRecenceur\" TEXT," + // 28: codeAgentRecenceur
                "\"isVerified\" INTEGER);"); // 29: isVerified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_batiment\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Batiment entity) {
        stmt.clearBindings();
 
        Long batimentId = entity.getBatimentId();
        if (batimentId != null) {
            stmt.bindLong(1, batimentId);
        }
 
        String deptId = entity.getDeptId();
        if (deptId != null) {
            stmt.bindString(2, deptId);
        }
 
        String comId = entity.getComId();
        if (comId != null) {
            stmt.bindString(3, comId);
        }
 
        String vqseId = entity.getVqseId();
        if (vqseId != null) {
            stmt.bindString(4, vqseId);
        }
 
        String sdeId = entity.getSdeId();
        if (sdeId != null) {
            stmt.bindString(5, sdeId);
        }
 
        Short zone = entity.getZone();
        if (zone != null) {
            stmt.bindLong(6, zone);
        }
 
        String disctrictId = entity.getDisctrictId();
        if (disctrictId != null) {
            stmt.bindString(7, disctrictId);
        }
 
        String qhabitation = entity.getQhabitation();
        if (qhabitation != null) {
            stmt.bindString(8, qhabitation);
        }
 
        String qlocalite = entity.getQlocalite();
        if (qlocalite != null) {
            stmt.bindString(9, qlocalite);
        }
 
        String qadresse = entity.getQadresse();
        if (qadresse != null) {
            stmt.bindString(10, qadresse);
        }
 
        String qrec = entity.getQrec();
        if (qrec != null) {
            stmt.bindString(11, qrec);
        }
 
        String qepc = entity.getQepc();
        if (qepc != null) {
            stmt.bindString(12, qepc);
        }
 
        Short qb1Etat = entity.getQb1Etat();
        if (qb1Etat != null) {
            stmt.bindLong(13, qb1Etat);
        }
 
        Short qb2Type = entity.getQb2Type();
        if (qb2Type != null) {
            stmt.bindLong(14, qb2Type);
        }
 
        Short qb3StatutOccupation = entity.getQb3StatutOccupation();
        if (qb3StatutOccupation != null) {
            stmt.bindLong(15, qb3StatutOccupation);
        }
 
        Short qb4NbreLogeIndividuel = entity.getQb4NbreLogeIndividuel();
        if (qb4NbreLogeIndividuel != null) {
            stmt.bindLong(16, qb4NbreLogeIndividuel);
        }
 
        Short statut = entity.getStatut();
        if (statut != null) {
            stmt.bindLong(17, statut);
        }
 
        String dateEnvoi = entity.getDateEnvoi();
        if (dateEnvoi != null) {
            stmt.bindString(18, dateEnvoi);
        }
 
        Boolean isValidated = entity.getIsValidated();
        if (isValidated != null) {
            stmt.bindLong(19, isValidated ? 1L: 0L);
        }
 
        Boolean isSynchroToAppSup = entity.getIsSynchroToAppSup();
        if (isSynchroToAppSup != null) {
            stmt.bindLong(20, isSynchroToAppSup ? 1L: 0L);
        }
 
        Boolean isSynchroToCentrale = entity.getIsSynchroToCentrale();
        if (isSynchroToCentrale != null) {
            stmt.bindLong(21, isSynchroToCentrale ? 1L: 0L);
        }
 
        String dateDebutCollecte = entity.getDateDebutCollecte();
        if (dateDebutCollecte != null) {
            stmt.bindString(22, dateDebutCollecte);
        }
 
        String dateFinCollecte = entity.getDateFinCollecte();
        if (dateFinCollecte != null) {
            stmt.bindString(23, dateFinCollecte);
        }
 
        Integer dureeSaisie = entity.getDureeSaisie();
        if (dureeSaisie != null) {
            stmt.bindLong(24, dureeSaisie);
        }
 
        Boolean isFieldAllFilled = entity.getIsFieldAllFilled();
        if (isFieldAllFilled != null) {
            stmt.bindLong(25, isFieldAllFilled ? 1L: 0L);
        }
 
        Boolean isContreEnqueteMade = entity.getIsContreEnqueteMade();
        if (isContreEnqueteMade != null) {
            stmt.bindLong(26, isContreEnqueteMade ? 1L: 0L);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(27, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(28, longitude);
        }
 
        String codeAgentRecenceur = entity.getCodeAgentRecenceur();
        if (codeAgentRecenceur != null) {
            stmt.bindString(29, codeAgentRecenceur);
        }
 
        Boolean isVerified = entity.getIsVerified();
        if (isVerified != null) {
            stmt.bindLong(30, isVerified ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Batiment readEntity(Cursor cursor, int offset) {
        Batiment entity = new Batiment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // batimentId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deptId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // vqseId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sdeId
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5), // zone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // disctrictId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qhabitation
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // qlocalite
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // qadresse
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // qrec
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // qepc
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12), // qb1Etat
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13), // qb2Type
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14), // qb3StatutOccupation
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15), // qb4NbreLogeIndividuel
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16), // statut
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // dateEnvoi
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // isValidated
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // isSynchroToAppSup
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // isSynchroToCentrale
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // dateDebutCollecte
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // dateFinCollecte
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // dureeSaisie
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0, // isFieldAllFilled
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0, // isContreEnqueteMade
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // latitude
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // longitude
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // codeAgentRecenceur
            cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0 // isVerified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Batiment entity, int offset) {
        entity.setBatimentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeptId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVqseId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSdeId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZone(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
        entity.setDisctrictId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQhabitation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQlocalite(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQadresse(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setQrec(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQepc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setQb1Etat(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12));
        entity.setQb2Type(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13));
        entity.setQb3StatutOccupation(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14));
        entity.setQb4NbreLogeIndividuel(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15));
        entity.setStatut(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16));
        entity.setDateEnvoi(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsValidated(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setIsSynchroToAppSup(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setIsSynchroToCentrale(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setDateDebutCollecte(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDateFinCollecte(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setDureeSaisie(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setIsFieldAllFilled(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0);
        entity.setIsContreEnqueteMade(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
        entity.setLatitude(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setLongitude(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setCodeAgentRecenceur(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIsVerified(cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Batiment entity, long rowId) {
        entity.setBatimentId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Batiment entity) {
        if(entity != null) {
            return entity.getBatimentId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
