package ht.ihsi.rgph.mobile.epc.backend.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_logement".
*/
public class LogementDao extends AbstractDao<Logement, Long> {

    public static final String TABLENAME = "tbl_logement";

    /**
     * Properties of entity Logement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LogeId = new Property(0, Long.class, "logeId", true, "logeId");
        public final static Property BatimentId = new Property(1, Long.class, "batimentId", false, "batimentId");
        public final static Property SdeId = new Property(2, String.class, "sdeId", false, "sdeId");
        public final static Property QlCategLogement = new Property(3, Short.class, "qlCategLogement", false, "qlCategLogement");
        public final static Property Qlin1NumeroOrdre = new Property(4, Short.class, "qlin1NumeroOrdre", false, "qlin1NumeroOrdre");
        public final static Property Qlc1TypeLogement = new Property(5, Short.class, "qlc1TypeLogement", false, "qlc1TypeLogement");
        public final static Property Qlc2bTotalGarcon = new Property(6, Short.class, "qlc2bTotalGarcon", false, "qlc2bTotalGarcon");
        public final static Property Qlc2bTotalFille = new Property(7, Short.class, "qlc2bTotalFille", false, "qlc2bTotalFille");
        public final static Property QlcTotalIndividus = new Property(8, Short.class, "qlcTotalIndividus", false, "qlcTotalIndividus");
        public final static Property Qlin2StatutOccupation = new Property(9, Short.class, "qlin2StatutOccupation", false, "qlin2StatutOccupation");
        public final static Property Qlin3ExistenceLogement = new Property(10, Short.class, "qlin3ExistenceLogement", false, "qlin3ExistenceLogement");
        public final static Property Qlin4TypeLogement = new Property(11, Short.class, "qlin4TypeLogement", false, "qlin4TypeLogement");
        public final static Property Qlin5MateriauSol = new Property(12, Short.class, "qlin5MateriauSol", false, "qlin5MateriauSol");
        public final static Property Qlin6NombrePiece = new Property(13, Short.class, "qlin6NombrePiece", false, "qlin6NombrePiece");
        public final static Property Qlin7NbreChambreACoucher = new Property(14, Short.class, "qlin7NbreChambreACoucher", false, "qlin7NbreChambreACoucher");
        public final static Property Qlin8NbreIndividuDepense = new Property(15, Short.class, "qlin8NbreIndividuDepense", false, "qlin8NbreIndividuDepense");
        public final static Property Qlin9NbreTotalMenage = new Property(16, Short.class, "qlin9NbreTotalMenage", false, "qlin9NbreTotalMenage");
        public final static Property Statut = new Property(17, Short.class, "statut", false, "statut");
        public final static Property IsValidated = new Property(18, Boolean.class, "isValidated", false, "isValidated");
        public final static Property DateDebutCollecte = new Property(19, String.class, "dateDebutCollecte", false, "dateDebutCollecte");
        public final static Property DateFinCollecte = new Property(20, String.class, "dateFinCollecte", false, "dateFinCollecte");
        public final static Property DureeSaisie = new Property(21, Integer.class, "dureeSaisie", false, "dureeSaisie");
        public final static Property IsFieldAllFilled = new Property(22, Boolean.class, "isFieldAllFilled", false, "isFieldAllFilled");
        public final static Property IsContreEnqueteMade = new Property(23, Boolean.class, "isContreEnqueteMade", false, "isContreEnqueteMade");
        public final static Property NbrTentative = new Property(24, Short.class, "nbrTentative", false, "nbrTentative");
        public final static Property CodeAgentRecenceur = new Property(25, String.class, "codeAgentRecenceur", false, "codeAgentRecenceur");
        public final static Property IsVerified = new Property(26, Boolean.class, "isVerified", false, "isVerified");
    };


    public LogementDao(DaoConfig config) {
        super(config);
    }
    
    public LogementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_logement\" (" + //
                "\"logeId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: logeId
                "\"batimentId\" INTEGER," + // 1: batimentId
                "\"sdeId\" TEXT," + // 2: sdeId
                "\"qlCategLogement\" INTEGER," + // 3: qlCategLogement
                "\"qlin1NumeroOrdre\" INTEGER," + // 4: qlin1NumeroOrdre
                "\"qlc1TypeLogement\" INTEGER," + // 5: qlc1TypeLogement
                "\"qlc2bTotalGarcon\" INTEGER," + // 6: qlc2bTotalGarcon
                "\"qlc2bTotalFille\" INTEGER," + // 7: qlc2bTotalFille
                "\"qlcTotalIndividus\" INTEGER," + // 8: qlcTotalIndividus
                "\"qlin2StatutOccupation\" INTEGER," + // 9: qlin2StatutOccupation
                "\"qlin3ExistenceLogement\" INTEGER," + // 10: qlin3ExistenceLogement
                "\"qlin4TypeLogement\" INTEGER," + // 11: qlin4TypeLogement
                "\"qlin5MateriauSol\" INTEGER," + // 12: qlin5MateriauSol
                "\"qlin6NombrePiece\" INTEGER," + // 13: qlin6NombrePiece
                "\"qlin7NbreChambreACoucher\" INTEGER," + // 14: qlin7NbreChambreACoucher
                "\"qlin8NbreIndividuDepense\" INTEGER," + // 15: qlin8NbreIndividuDepense
                "\"qlin9NbreTotalMenage\" INTEGER," + // 16: qlin9NbreTotalMenage
                "\"statut\" INTEGER," + // 17: statut
                "\"isValidated\" INTEGER," + // 18: isValidated
                "\"dateDebutCollecte\" TEXT," + // 19: dateDebutCollecte
                "\"dateFinCollecte\" TEXT," + // 20: dateFinCollecte
                "\"dureeSaisie\" INTEGER," + // 21: dureeSaisie
                "\"isFieldAllFilled\" INTEGER," + // 22: isFieldAllFilled
                "\"isContreEnqueteMade\" INTEGER," + // 23: isContreEnqueteMade
                "\"nbrTentative\" INTEGER," + // 24: nbrTentative
                "\"codeAgentRecenceur\" TEXT," + // 25: codeAgentRecenceur
                "\"isVerified\" INTEGER);"); // 26: isVerified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_logement\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Logement entity) {
        stmt.clearBindings();
 
        Long logeId = entity.getLogeId();
        if (logeId != null) {
            stmt.bindLong(1, logeId);
        }
 
        Long batimentId = entity.getBatimentId();
        if (batimentId != null) {
            stmt.bindLong(2, batimentId);
        }
 
        String sdeId = entity.getSdeId();
        if (sdeId != null) {
            stmt.bindString(3, sdeId);
        }
 
        Short qlCategLogement = entity.getQlCategLogement();
        if (qlCategLogement != null) {
            stmt.bindLong(4, qlCategLogement);
        }
 
        Short qlin1NumeroOrdre = entity.getQlin1NumeroOrdre();
        if (qlin1NumeroOrdre != null) {
            stmt.bindLong(5, qlin1NumeroOrdre);
        }
 
        Short qlc1TypeLogement = entity.getQlc1TypeLogement();
        if (qlc1TypeLogement != null) {
            stmt.bindLong(6, qlc1TypeLogement);
        }
 
        Short qlc2bTotalGarcon = entity.getQlc2bTotalGarcon();
        if (qlc2bTotalGarcon != null) {
            stmt.bindLong(7, qlc2bTotalGarcon);
        }
 
        Short qlc2bTotalFille = entity.getQlc2bTotalFille();
        if (qlc2bTotalFille != null) {
            stmt.bindLong(8, qlc2bTotalFille);
        }
 
        Short qlcTotalIndividus = entity.getQlcTotalIndividus();
        if (qlcTotalIndividus != null) {
            stmt.bindLong(9, qlcTotalIndividus);
        }
 
        Short qlin2StatutOccupation = entity.getQlin2StatutOccupation();
        if (qlin2StatutOccupation != null) {
            stmt.bindLong(10, qlin2StatutOccupation);
        }
 
        Short qlin3ExistenceLogement = entity.getQlin3ExistenceLogement();
        if (qlin3ExistenceLogement != null) {
            stmt.bindLong(11, qlin3ExistenceLogement);
        }
 
        Short qlin4TypeLogement = entity.getQlin4TypeLogement();
        if (qlin4TypeLogement != null) {
            stmt.bindLong(12, qlin4TypeLogement);
        }
 
        Short qlin5MateriauSol = entity.getQlin5MateriauSol();
        if (qlin5MateriauSol != null) {
            stmt.bindLong(13, qlin5MateriauSol);
        }
 
        Short qlin6NombrePiece = entity.getQlin6NombrePiece();
        if (qlin6NombrePiece != null) {
            stmt.bindLong(14, qlin6NombrePiece);
        }
 
        Short qlin7NbreChambreACoucher = entity.getQlin7NbreChambreACoucher();
        if (qlin7NbreChambreACoucher != null) {
            stmt.bindLong(15, qlin7NbreChambreACoucher);
        }
 
        Short qlin8NbreIndividuDepense = entity.getQlin8NbreIndividuDepense();
        if (qlin8NbreIndividuDepense != null) {
            stmt.bindLong(16, qlin8NbreIndividuDepense);
        }
 
        Short qlin9NbreTotalMenage = entity.getQlin9NbreTotalMenage();
        if (qlin9NbreTotalMenage != null) {
            stmt.bindLong(17, qlin9NbreTotalMenage);
        }
 
        Short statut = entity.getStatut();
        if (statut != null) {
            stmt.bindLong(18, statut);
        }
 
        Boolean isValidated = entity.getIsValidated();
        if (isValidated != null) {
            stmt.bindLong(19, isValidated ? 1L: 0L);
        }
 
        String dateDebutCollecte = entity.getDateDebutCollecte();
        if (dateDebutCollecte != null) {
            stmt.bindString(20, dateDebutCollecte);
        }
 
        String dateFinCollecte = entity.getDateFinCollecte();
        if (dateFinCollecte != null) {
            stmt.bindString(21, dateFinCollecte);
        }
 
        Integer dureeSaisie = entity.getDureeSaisie();
        if (dureeSaisie != null) {
            stmt.bindLong(22, dureeSaisie);
        }
 
        Boolean isFieldAllFilled = entity.getIsFieldAllFilled();
        if (isFieldAllFilled != null) {
            stmt.bindLong(23, isFieldAllFilled ? 1L: 0L);
        }
 
        Boolean isContreEnqueteMade = entity.getIsContreEnqueteMade();
        if (isContreEnqueteMade != null) {
            stmt.bindLong(24, isContreEnqueteMade ? 1L: 0L);
        }
 
        Short nbrTentative = entity.getNbrTentative();
        if (nbrTentative != null) {
            stmt.bindLong(25, nbrTentative);
        }
 
        String codeAgentRecenceur = entity.getCodeAgentRecenceur();
        if (codeAgentRecenceur != null) {
            stmt.bindString(26, codeAgentRecenceur);
        }
 
        Boolean isVerified = entity.getIsVerified();
        if (isVerified != null) {
            stmt.bindLong(27, isVerified ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Logement readEntity(Cursor cursor, int offset) {
        Logement entity = new Logement( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // logeId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // batimentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sdeId
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3), // qlCategLogement
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4), // qlin1NumeroOrdre
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5), // qlc1TypeLogement
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6), // qlc2bTotalGarcon
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7), // qlc2bTotalFille
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8), // qlcTotalIndividus
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9), // qlin2StatutOccupation
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10), // qlin3ExistenceLogement
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11), // qlin4TypeLogement
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12), // qlin5MateriauSol
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13), // qlin6NombrePiece
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14), // qlin7NbreChambreACoucher
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15), // qlin8NbreIndividuDepense
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16), // qlin9NbreTotalMenage
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17), // statut
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // isValidated
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // dateDebutCollecte
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // dateFinCollecte
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // dureeSaisie
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0, // isFieldAllFilled
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // isContreEnqueteMade
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24), // nbrTentative
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // codeAgentRecenceur
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0 // isVerified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Logement entity, int offset) {
        entity.setLogeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBatimentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSdeId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQlCategLogement(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3));
        entity.setQlin1NumeroOrdre(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4));
        entity.setQlc1TypeLogement(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
        entity.setQlc2bTotalGarcon(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6));
        entity.setQlc2bTotalFille(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7));
        entity.setQlcTotalIndividus(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8));
        entity.setQlin2StatutOccupation(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9));
        entity.setQlin3ExistenceLogement(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10));
        entity.setQlin4TypeLogement(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11));
        entity.setQlin5MateriauSol(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12));
        entity.setQlin6NombrePiece(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13));
        entity.setQlin7NbreChambreACoucher(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14));
        entity.setQlin8NbreIndividuDepense(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15));
        entity.setQlin9NbreTotalMenage(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16));
        entity.setStatut(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17));
        entity.setIsValidated(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setDateDebutCollecte(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDateFinCollecte(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDureeSaisie(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setIsFieldAllFilled(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0);
        entity.setIsContreEnqueteMade(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setNbrTentative(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24));
        entity.setCodeAgentRecenceur(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIsVerified(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Logement entity, long rowId) {
        entity.setLogeId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Logement entity) {
        if(entity != null) {
            return entity.getLogeId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
