package ht.ihsi.rgph.mobile.epc.backend.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.mobile.epc.backend.entities.Logement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_logement".
*/
public class LogementDao extends AbstractDao<Logement, Long> {

    public static final String TABLENAME = "tbl_logement";

    /**
     * Properties of entity Logement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LogeId = new Property(0, Long.class, "logeId", true, "logeId");
        public final static Property BatimentId = new Property(1, Long.class, "batimentId", false, "batimentId");
        public final static Property SdeId = new Property(2, String.class, "sdeId", false, "sdeId");
        public final static Property QlCategLogement = new Property(3, Short.class, "qlCategLogement", false, "qlCategLogement");
        public final static Property Qlin1NumeroOrdre = new Property(4, Short.class, "qlin1NumeroOrdre", false, "qlin1NumeroOrdre");
        public final static Property Qlin2StatutOccupation = new Property(5, Short.class, "qlin2StatutOccupation", false, "qlin2StatutOccupation");
        public final static Property Qlin3TypeLogement = new Property(6, Short.class, "qlin3TypeLogement", false, "qlin3TypeLogement");
        public final static Property Qlin4IsHaveIndividuDepense = new Property(7, Short.class, "qlin4IsHaveIndividuDepense", false, "qlin4IsHaveIndividuDepense");
        public final static Property Qlin5NbreTotalMenage = new Property(8, Short.class, "qlin5NbreTotalMenage", false, "qlin5NbreTotalMenage");
        public final static Property Statut = new Property(9, Short.class, "statut", false, "statut");
        public final static Property IsValidated = new Property(10, Boolean.class, "isValidated", false, "isValidated");
        public final static Property IsFieldAllFilled = new Property(11, Boolean.class, "isFieldAllFilled", false, "isFieldAllFilled");
        public final static Property DateDebutCollecte = new Property(12, String.class, "dateDebutCollecte", false, "dateDebutCollecte");
        public final static Property DateFinCollecte = new Property(13, String.class, "dateFinCollecte", false, "dateFinCollecte");
        public final static Property DureeSaisie = new Property(14, Integer.class, "dureeSaisie", false, "dureeSaisie");
        public final static Property IsContreEnqueteMade = new Property(15, Boolean.class, "isContreEnqueteMade", false, "isContreEnqueteMade");
        public final static Property NbrTentative = new Property(16, Short.class, "nbrTentative", false, "nbrTentative");
        public final static Property CodeAgentRecenceur = new Property(17, String.class, "codeAgentRecenceur", false, "codeAgentRecenceur");
        public final static Property IsVerified = new Property(18, Boolean.class, "isVerified", false, "isVerified");
    };


    public LogementDao(DaoConfig config) {
        super(config);
    }
    
    public LogementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_logement\" (" + //
                "\"logeId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: logeId
                "\"batimentId\" INTEGER," + // 1: batimentId
                "\"sdeId\" TEXT," + // 2: sdeId
                "\"qlCategLogement\" INTEGER," + // 3: qlCategLogement
                "\"qlin1NumeroOrdre\" INTEGER," + // 4: qlin1NumeroOrdre
                "\"qlin2StatutOccupation\" INTEGER," + // 5: qlin2StatutOccupation
                "\"qlin3TypeLogement\" INTEGER," + // 6: qlin3TypeLogement
                "\"qlin4IsHaveIndividuDepense\" INTEGER," + // 7: qlin4IsHaveIndividuDepense
                "\"qlin5NbreTotalMenage\" INTEGER," + // 8: qlin5NbreTotalMenage
                "\"statut\" INTEGER," + // 9: statut
                "\"isValidated\" INTEGER," + // 10: isValidated
                "\"isFieldAllFilled\" INTEGER," + // 11: isFieldAllFilled
                "\"dateDebutCollecte\" TEXT," + // 12: dateDebutCollecte
                "\"dateFinCollecte\" TEXT," + // 13: dateFinCollecte
                "\"dureeSaisie\" INTEGER," + // 14: dureeSaisie
                "\"isContreEnqueteMade\" INTEGER," + // 15: isContreEnqueteMade
                "\"nbrTentative\" INTEGER," + // 16: nbrTentative
                "\"codeAgentRecenceur\" TEXT," + // 17: codeAgentRecenceur
                "\"isVerified\" INTEGER);"); // 18: isVerified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_logement\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Logement entity) {
        stmt.clearBindings();
 
        Long logeId = entity.getLogeId();
        if (logeId != null) {
            stmt.bindLong(1, logeId);
        }
 
        Long batimentId = entity.getBatimentId();
        if (batimentId != null) {
            stmt.bindLong(2, batimentId);
        }
 
        String sdeId = entity.getSdeId();
        if (sdeId != null) {
            stmt.bindString(3, sdeId);
        }
 
        Short qlCategLogement = entity.getQlCategLogement();
        if (qlCategLogement != null) {
            stmt.bindLong(4, qlCategLogement);
        }
 
        Short qlin1NumeroOrdre = entity.getQlin1NumeroOrdre();
        if (qlin1NumeroOrdre != null) {
            stmt.bindLong(5, qlin1NumeroOrdre);
        }
 
        Short qlin2StatutOccupation = entity.getQlin2StatutOccupation();
        if (qlin2StatutOccupation != null) {
            stmt.bindLong(6, qlin2StatutOccupation);
        }
 
        Short qlin3TypeLogement = entity.getQlin3TypeLogement();
        if (qlin3TypeLogement != null) {
            stmt.bindLong(7, qlin3TypeLogement);
        }
 
        Short qlin4IsHaveIndividuDepense = entity.getQlin4IsHaveIndividuDepense();
        if (qlin4IsHaveIndividuDepense != null) {
            stmt.bindLong(8, qlin4IsHaveIndividuDepense);
        }
 
        Short qlin5NbreTotalMenage = entity.getQlin5NbreTotalMenage();
        if (qlin5NbreTotalMenage != null) {
            stmt.bindLong(9, qlin5NbreTotalMenage);
        }
 
        Short statut = entity.getStatut();
        if (statut != null) {
            stmt.bindLong(10, statut);
        }
 
        Boolean isValidated = entity.getIsValidated();
        if (isValidated != null) {
            stmt.bindLong(11, isValidated ? 1L: 0L);
        }
 
        Boolean isFieldAllFilled = entity.getIsFieldAllFilled();
        if (isFieldAllFilled != null) {
            stmt.bindLong(12, isFieldAllFilled ? 1L: 0L);
        }
 
        String dateDebutCollecte = entity.getDateDebutCollecte();
        if (dateDebutCollecte != null) {
            stmt.bindString(13, dateDebutCollecte);
        }
 
        String dateFinCollecte = entity.getDateFinCollecte();
        if (dateFinCollecte != null) {
            stmt.bindString(14, dateFinCollecte);
        }
 
        Integer dureeSaisie = entity.getDureeSaisie();
        if (dureeSaisie != null) {
            stmt.bindLong(15, dureeSaisie);
        }
 
        Boolean isContreEnqueteMade = entity.getIsContreEnqueteMade();
        if (isContreEnqueteMade != null) {
            stmt.bindLong(16, isContreEnqueteMade ? 1L: 0L);
        }
 
        Short nbrTentative = entity.getNbrTentative();
        if (nbrTentative != null) {
            stmt.bindLong(17, nbrTentative);
        }
 
        String codeAgentRecenceur = entity.getCodeAgentRecenceur();
        if (codeAgentRecenceur != null) {
            stmt.bindString(18, codeAgentRecenceur);
        }
 
        Boolean isVerified = entity.getIsVerified();
        if (isVerified != null) {
            stmt.bindLong(19, isVerified ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Logement readEntity(Cursor cursor, int offset) {
        Logement entity = new Logement( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // logeId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // batimentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sdeId
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3), // qlCategLogement
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4), // qlin1NumeroOrdre
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5), // qlin2StatutOccupation
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6), // qlin3TypeLogement
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7), // qlin4IsHaveIndividuDepense
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8), // qlin5NbreTotalMenage
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9), // statut
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isValidated
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isFieldAllFilled
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dateDebutCollecte
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // dateFinCollecte
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // dureeSaisie
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // isContreEnqueteMade
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16), // nbrTentative
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // codeAgentRecenceur
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0 // isVerified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Logement entity, int offset) {
        entity.setLogeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBatimentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSdeId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQlCategLogement(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3));
        entity.setQlin1NumeroOrdre(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4));
        entity.setQlin2StatutOccupation(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
        entity.setQlin3TypeLogement(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6));
        entity.setQlin4IsHaveIndividuDepense(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7));
        entity.setQlin5NbreTotalMenage(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8));
        entity.setStatut(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9));
        entity.setIsValidated(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setIsFieldAllFilled(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setDateDebutCollecte(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDateFinCollecte(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDureeSaisie(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setIsContreEnqueteMade(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setNbrTentative(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16));
        entity.setCodeAgentRecenceur(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsVerified(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Logement entity, long rowId) {
        entity.setLogeId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Logement entity) {
        if(entity != null) {
            return entity.getLogeId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
