package ht.ihsi.rgph.mobile.epc.backend.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_question".
*/
public class QuestionDao extends AbstractDao<Question, Void> {

    public static final String TABLENAME = "tbl_question";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CodeQuestion = new Property(0, String.class, "codeQuestion", false, "codeQuestion");
        public final static Property Libelle = new Property(1, String.class, "libelle", false, "libelle");
        public final static Property DetailsQuestion = new Property(2, String.class, "detailsQuestion", false, "detailsQuestion");
        public final static Property IndicationsQuestion = new Property(3, String.class, "IndicationsQuestion", false, "IndicationsQuestion");
        public final static Property CodeCategorie = new Property(4, String.class, "codeCategorie", false, "codeCategorie");
        public final static Property NomChamps = new Property(5, String.class, "nomChamps", false, "nomChamps");
        public final static Property TypeQuestion = new Property(6, Integer.class, "typeQuestion", false, "typeQuestion");
        public final static Property CaratereAccepte = new Property(7, Integer.class, "caratereAccepte", false, "caratereAccepte");
        public final static Property NbreValeurMinimal = new Property(8, Integer.class, "nbreValeurMinimal", false, "nbreValeurMinimal");
        public final static Property NbreCaratereMaximal = new Property(9, Integer.class, "nbreCaratereMaximal", false, "nbreCaratereMaximal");
        public final static Property ContrainteSautChampsValeur = new Property(10, String.class, "contrainteSautChampsValeur", false, "contrainteSautChampsValeur");
        public final static Property EstSautReponse = new Property(11, Boolean.class, "estSautReponse", false, "estSautReponse");
        public final static Property QPrecedent = new Property(12, String.class, "qPrecedent", false, "qPrecedent");
        public final static Property QSuivant = new Property(13, String.class, "qSuivant", false, "qSuivant");
    };


    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_question\" (" + //
                "\"codeQuestion\" TEXT NOT NULL UNIQUE ," + // 0: codeQuestion
                "\"libelle\" TEXT," + // 1: libelle
                "\"detailsQuestion\" TEXT," + // 2: detailsQuestion
                "\"IndicationsQuestion\" TEXT," + // 3: IndicationsQuestion
                "\"codeCategorie\" TEXT," + // 4: codeCategorie
                "\"nomChamps\" TEXT," + // 5: nomChamps
                "\"typeQuestion\" INTEGER," + // 6: typeQuestion
                "\"caratereAccepte\" INTEGER," + // 7: caratereAccepte
                "\"nbreValeurMinimal\" INTEGER," + // 8: nbreValeurMinimal
                "\"nbreCaratereMaximal\" INTEGER," + // 9: nbreCaratereMaximal
                "\"contrainteSautChampsValeur\" TEXT," + // 10: contrainteSautChampsValeur
                "\"estSautReponse\" INTEGER," + // 11: estSautReponse
                "\"qPrecedent\" TEXT," + // 12: qPrecedent
                "\"qSuivant\" TEXT);"); // 13: qSuivant
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_question\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCodeQuestion());
 
        String libelle = entity.getLibelle();
        if (libelle != null) {
            stmt.bindString(2, libelle);
        }
 
        String detailsQuestion = entity.getDetailsQuestion();
        if (detailsQuestion != null) {
            stmt.bindString(3, detailsQuestion);
        }
 
        String IndicationsQuestion = entity.getIndicationsQuestion();
        if (IndicationsQuestion != null) {
            stmt.bindString(4, IndicationsQuestion);
        }
 
        String codeCategorie = entity.getCodeCategorie();
        if (codeCategorie != null) {
            stmt.bindString(5, codeCategorie);
        }
 
        String nomChamps = entity.getNomChamps();
        if (nomChamps != null) {
            stmt.bindString(6, nomChamps);
        }
 
        Integer typeQuestion = entity.getTypeQuestion();
        if (typeQuestion != null) {
            stmt.bindLong(7, typeQuestion);
        }
 
        Integer caratereAccepte = entity.getCaratereAccepte();
        if (caratereAccepte != null) {
            stmt.bindLong(8, caratereAccepte);
        }
 
        Integer nbreValeurMinimal = entity.getNbreValeurMinimal();
        if (nbreValeurMinimal != null) {
            stmt.bindLong(9, nbreValeurMinimal);
        }
 
        Integer nbreCaratereMaximal = entity.getNbreCaratereMaximal();
        if (nbreCaratereMaximal != null) {
            stmt.bindLong(10, nbreCaratereMaximal);
        }
 
        String contrainteSautChampsValeur = entity.getContrainteSautChampsValeur();
        if (contrainteSautChampsValeur != null) {
            stmt.bindString(11, contrainteSautChampsValeur);
        }
 
        Boolean estSautReponse = entity.getEstSautReponse();
        if (estSautReponse != null) {
            stmt.bindLong(12, estSautReponse ? 1L: 0L);
        }
 
        String qPrecedent = entity.getQPrecedent();
        if (qPrecedent != null) {
            stmt.bindString(13, qPrecedent);
        }
 
        String qSuivant = entity.getQSuivant();
        if (qSuivant != null) {
            stmt.bindString(14, qSuivant);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.getString(offset + 0), // codeQuestion
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // libelle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // detailsQuestion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // IndicationsQuestion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // codeCategorie
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nomChamps
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // typeQuestion
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // caratereAccepte
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // nbreValeurMinimal
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // nbreCaratereMaximal
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // contrainteSautChampsValeur
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // estSautReponse
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // qPrecedent
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // qSuivant
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setCodeQuestion(cursor.getString(offset + 0));
        entity.setLibelle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetailsQuestion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIndicationsQuestion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCodeCategorie(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNomChamps(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTypeQuestion(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCaratereAccepte(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setNbreValeurMinimal(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setNbreCaratereMaximal(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setContrainteSautChampsValeur(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEstSautReponse(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setQPrecedent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setQSuivant(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Question entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Question entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
