package ht.ihsi.rgph.mobile.epc.backend.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.mobile.epc.backend.entities.QuestionModule;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_question_module".
*/
public class QuestionModuleDao extends AbstractDao<QuestionModule, Void> {

    public static final String TABLENAME = "tbl_question_module";

    /**
     * Properties of entity QuestionModule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Ordre = new Property(0, String.class, "ordre", false, "ordre");
        public final static Property CodeModule = new Property(1, String.class, "codeModule", false, "codeModule");
        public final static Property CodeQuestion = new Property(2, String.class, "codeQuestion", false, "codeQuestion");
        public final static Property EstDebut = new Property(3, Boolean.class, "estDebut", false, "estDebut");
    };


    public QuestionModuleDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionModuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_question_module\" (" + //
                "\"ordre\" TEXT," + // 0: ordre
                "\"codeModule\" TEXT NOT NULL ," + // 1: codeModule
                "\"codeQuestion\" TEXT NOT NULL ," + // 2: codeQuestion
                "\"estDebut\" INTEGER);"); // 3: estDebut
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_tbl_question_module_codeModule ON tbl_question_module" +
                " (\"codeModule\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_tbl_question_module_codeQuestion ON tbl_question_module" +
                " (\"codeQuestion\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_question_module\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QuestionModule entity) {
        stmt.clearBindings();
 
        String ordre = entity.getOrdre();
        if (ordre != null) {
            stmt.bindString(1, ordre);
        }
        stmt.bindString(2, entity.getCodeModule());
        stmt.bindString(3, entity.getCodeQuestion());
 
        Boolean estDebut = entity.getEstDebut();
        if (estDebut != null) {
            stmt.bindLong(4, estDebut ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public QuestionModule readEntity(Cursor cursor, int offset) {
        QuestionModule entity = new QuestionModule( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ordre
            cursor.getString(offset + 1), // codeModule
            cursor.getString(offset + 2), // codeQuestion
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // estDebut
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QuestionModule entity, int offset) {
        entity.setOrdre(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCodeModule(cursor.getString(offset + 1));
        entity.setCodeQuestion(cursor.getString(offset + 2));
        entity.setEstDebut(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(QuestionModule entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(QuestionModule entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
