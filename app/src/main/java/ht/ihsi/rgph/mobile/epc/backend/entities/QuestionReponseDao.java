package ht.ihsi.rgph.mobile.epc.backend.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.mobile.epc.backend.entities.QuestionReponse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_question_reponse".
*/
public class QuestionReponseDao extends AbstractDao<QuestionReponse, Void> {

    public static final String TABLENAME = "tbl_question_reponse";

    /**
     * Properties of entity QuestionReponse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CodeQuestion = new Property(0, String.class, "codeQuestion", false, "codeQuestion");
        public final static Property CodeUniqueReponse = new Property(1, String.class, "codeUniqueReponse", false, "codeUniqueReponse");
        public final static Property CodeReponse = new Property(2, String.class, "codeReponse", false, "codeReponse");
        public final static Property LibelleReponse = new Property(3, String.class, "libelleReponse", false, "libelleReponse");
        public final static Property EstEnfant = new Property(4, Boolean.class, "estEnfant", false, "estEnfant");
        public final static Property AvoirEnfant = new Property(5, Boolean.class, "avoirEnfant", false, "avoirEnfant");
        public final static Property CodeParent = new Property(6, String.class, "codeParent", false, "codeParent");
        public final static Property QPrecedent = new Property(7, String.class, "qPrecedent", false, "qPrecedent");
        public final static Property QSuivant = new Property(8, String.class, "qSuivant", false, "qSuivant");
    };


    public QuestionReponseDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionReponseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_question_reponse\" (" + //
                "\"codeQuestion\" TEXT NOT NULL ," + // 0: codeQuestion
                "\"codeUniqueReponse\" TEXT NOT NULL ," + // 1: codeUniqueReponse
                "\"codeReponse\" TEXT NOT NULL ," + // 2: codeReponse
                "\"libelleReponse\" TEXT," + // 3: libelleReponse
                "\"estEnfant\" INTEGER," + // 4: estEnfant
                "\"avoirEnfant\" INTEGER," + // 5: avoirEnfant
                "\"codeParent\" TEXT," + // 6: codeParent
                "\"qPrecedent\" TEXT," + // 7: qPrecedent
                "\"qSuivant\" TEXT);"); // 8: qSuivant
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_tbl_question_reponse_codeQuestion ON tbl_question_reponse" +
                " (\"codeQuestion\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_tbl_question_reponse_codeUniqueReponse ON tbl_question_reponse" +
                " (\"codeUniqueReponse\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_tbl_question_reponse_codeReponse ON tbl_question_reponse" +
                " (\"codeReponse\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_question_reponse\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QuestionReponse entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCodeQuestion());
        stmt.bindString(2, entity.getCodeUniqueReponse());
        stmt.bindString(3, entity.getCodeReponse());
 
        String libelleReponse = entity.getLibelleReponse();
        if (libelleReponse != null) {
            stmt.bindString(4, libelleReponse);
        }
 
        Boolean estEnfant = entity.getEstEnfant();
        if (estEnfant != null) {
            stmt.bindLong(5, estEnfant ? 1L: 0L);
        }
 
        Boolean avoirEnfant = entity.getAvoirEnfant();
        if (avoirEnfant != null) {
            stmt.bindLong(6, avoirEnfant ? 1L: 0L);
        }
 
        String codeParent = entity.getCodeParent();
        if (codeParent != null) {
            stmt.bindString(7, codeParent);
        }
 
        String qPrecedent = entity.getQPrecedent();
        if (qPrecedent != null) {
            stmt.bindString(8, qPrecedent);
        }
 
        String qSuivant = entity.getQSuivant();
        if (qSuivant != null) {
            stmt.bindString(9, qSuivant);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public QuestionReponse readEntity(Cursor cursor, int offset) {
        QuestionReponse entity = new QuestionReponse( //
            cursor.getString(offset + 0), // codeQuestion
            cursor.getString(offset + 1), // codeUniqueReponse
            cursor.getString(offset + 2), // codeReponse
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // libelleReponse
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // estEnfant
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // avoirEnfant
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // codeParent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qPrecedent
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // qSuivant
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QuestionReponse entity, int offset) {
        entity.setCodeQuestion(cursor.getString(offset + 0));
        entity.setCodeUniqueReponse(cursor.getString(offset + 1));
        entity.setCodeReponse(cursor.getString(offset + 2));
        entity.setLibelleReponse(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEstEnfant(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setAvoirEnfant(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setCodeParent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQPrecedent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQSuivant(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(QuestionReponse entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(QuestionReponse entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
