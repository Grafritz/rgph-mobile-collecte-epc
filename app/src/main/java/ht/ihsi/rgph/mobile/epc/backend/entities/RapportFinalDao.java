package ht.ihsi.rgph.mobile.epc.backend.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_rapportfinal".
*/
public class RapportFinalDao extends AbstractDao<RapportFinal, Long> {

    public static final String TABLENAME = "tbl_rapportfinal";

    /**
     * Properties of entity RapportFinal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RapportFinalId = new Property(0, Long.class, "rapportFinalId", true, "rapportFinalId");
        public final static Property BatimentId = new Property(1, Long.class, "batimentId", false, "batimentId");
        public final static Property LogeId = new Property(2, Long.class, "logeId", false, "logeId");
        public final static Property MenageId = new Property(3, Long.class, "menageId", false, "menageId");
        public final static Property RepondantPrincipalId = new Property(4, Long.class, "repondantPrincipalId", false, "repondantPrincipalId");
        public final static Property AE_EsKeGenMounKiEde = new Property(5, Short.class, "aE_EsKeGenMounKiEde", false, "aE_EsKeGenMounKiEde");
        public final static Property AE_IsVivreDansMenage = new Property(6, Short.class, "aE_IsVivreDansMenage", false, "aE_IsVivreDansMenage");
        public final static Property AE_RepondantQuiAideId = new Property(7, Short.class, "aE_RepondantQuiAideId", false, "aE_RepondantQuiAideId");
        public final static Property F_EsKeGenMounKiEde = new Property(8, Short.class, "f_EsKeGenMounKiEde", false, "f_EsKeGenMounKiEde");
        public final static Property F_IsVivreDansMenage = new Property(9, Short.class, "f_IsVivreDansMenage", false, "f_IsVivreDansMenage");
        public final static Property F_RepondantQuiAideId = new Property(10, Long.class, "f_RepondantQuiAideId", false, "f_RepondantQuiAideId");
        public final static Property DateDebutCollecte = new Property(11, String.class, "dateDebutCollecte", false, "dateDebutCollecte");
        public final static Property DateFinCollecte = new Property(12, String.class, "dateFinCollecte", false, "dateFinCollecte");
        public final static Property DureeSaisie = new Property(13, Integer.class, "dureeSaisie", false, "dureeSaisie");
        public final static Property IsContreEnqueteMade = new Property(14, Boolean.class, "isContreEnqueteMade", false, "isContreEnqueteMade");
        public final static Property CodeAgentRecenceur = new Property(15, String.class, "codeAgentRecenceur", false, "codeAgentRecenceur");
    };


    public RapportFinalDao(DaoConfig config) {
        super(config);
    }
    
    public RapportFinalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_rapportfinal\" (" + //
                "\"rapportFinalId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: rapportFinalId
                "\"batimentId\" INTEGER," + // 1: batimentId
                "\"logeId\" INTEGER," + // 2: logeId
                "\"menageId\" INTEGER," + // 3: menageId
                "\"repondantPrincipalId\" INTEGER," + // 4: repondantPrincipalId
                "\"aE_EsKeGenMounKiEde\" INTEGER," + // 5: aE_EsKeGenMounKiEde
                "\"aE_IsVivreDansMenage\" INTEGER," + // 6: aE_IsVivreDansMenage
                "\"aE_RepondantQuiAideId\" INTEGER," + // 7: aE_RepondantQuiAideId
                "\"f_EsKeGenMounKiEde\" INTEGER," + // 8: f_EsKeGenMounKiEde
                "\"f_IsVivreDansMenage\" INTEGER," + // 9: f_IsVivreDansMenage
                "\"f_RepondantQuiAideId\" INTEGER," + // 10: f_RepondantQuiAideId
                "\"dateDebutCollecte\" TEXT," + // 11: dateDebutCollecte
                "\"dateFinCollecte\" TEXT," + // 12: dateFinCollecte
                "\"dureeSaisie\" INTEGER," + // 13: dureeSaisie
                "\"isContreEnqueteMade\" INTEGER," + // 14: isContreEnqueteMade
                "\"codeAgentRecenceur\" TEXT);"); // 15: codeAgentRecenceur
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_rapportfinal\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RapportFinal entity) {
        stmt.clearBindings();
 
        Long rapportFinalId = entity.getRapportFinalId();
        if (rapportFinalId != null) {
            stmt.bindLong(1, rapportFinalId);
        }
 
        Long batimentId = entity.getBatimentId();
        if (batimentId != null) {
            stmt.bindLong(2, batimentId);
        }
 
        Long logeId = entity.getLogeId();
        if (logeId != null) {
            stmt.bindLong(3, logeId);
        }
 
        Long menageId = entity.getMenageId();
        if (menageId != null) {
            stmt.bindLong(4, menageId);
        }
 
        Long repondantPrincipalId = entity.getRepondantPrincipalId();
        if (repondantPrincipalId != null) {
            stmt.bindLong(5, repondantPrincipalId);
        }
 
        Short aE_EsKeGenMounKiEde = entity.getAE_EsKeGenMounKiEde();
        if (aE_EsKeGenMounKiEde != null) {
            stmt.bindLong(6, aE_EsKeGenMounKiEde);
        }
 
        Short aE_IsVivreDansMenage = entity.getAE_IsVivreDansMenage();
        if (aE_IsVivreDansMenage != null) {
            stmt.bindLong(7, aE_IsVivreDansMenage);
        }
 
        Short aE_RepondantQuiAideId = entity.getAE_RepondantQuiAideId();
        if (aE_RepondantQuiAideId != null) {
            stmt.bindLong(8, aE_RepondantQuiAideId);
        }
 
        Short f_EsKeGenMounKiEde = entity.getF_EsKeGenMounKiEde();
        if (f_EsKeGenMounKiEde != null) {
            stmt.bindLong(9, f_EsKeGenMounKiEde);
        }
 
        Short f_IsVivreDansMenage = entity.getF_IsVivreDansMenage();
        if (f_IsVivreDansMenage != null) {
            stmt.bindLong(10, f_IsVivreDansMenage);
        }
 
        Long f_RepondantQuiAideId = entity.getF_RepondantQuiAideId();
        if (f_RepondantQuiAideId != null) {
            stmt.bindLong(11, f_RepondantQuiAideId);
        }
 
        String dateDebutCollecte = entity.getDateDebutCollecte();
        if (dateDebutCollecte != null) {
            stmt.bindString(12, dateDebutCollecte);
        }
 
        String dateFinCollecte = entity.getDateFinCollecte();
        if (dateFinCollecte != null) {
            stmt.bindString(13, dateFinCollecte);
        }
 
        Integer dureeSaisie = entity.getDureeSaisie();
        if (dureeSaisie != null) {
            stmt.bindLong(14, dureeSaisie);
        }
 
        Boolean isContreEnqueteMade = entity.getIsContreEnqueteMade();
        if (isContreEnqueteMade != null) {
            stmt.bindLong(15, isContreEnqueteMade ? 1L: 0L);
        }
 
        String codeAgentRecenceur = entity.getCodeAgentRecenceur();
        if (codeAgentRecenceur != null) {
            stmt.bindString(16, codeAgentRecenceur);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RapportFinal readEntity(Cursor cursor, int offset) {
        RapportFinal entity = new RapportFinal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // rapportFinalId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // batimentId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // logeId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // menageId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // repondantPrincipalId
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5), // aE_EsKeGenMounKiEde
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6), // aE_IsVivreDansMenage
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7), // aE_RepondantQuiAideId
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8), // f_EsKeGenMounKiEde
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9), // f_IsVivreDansMenage
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // f_RepondantQuiAideId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // dateDebutCollecte
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dateFinCollecte
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // dureeSaisie
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // isContreEnqueteMade
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // codeAgentRecenceur
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RapportFinal entity, int offset) {
        entity.setRapportFinalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBatimentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLogeId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMenageId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setRepondantPrincipalId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setAE_EsKeGenMounKiEde(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
        entity.setAE_IsVivreDansMenage(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6));
        entity.setAE_RepondantQuiAideId(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7));
        entity.setF_EsKeGenMounKiEde(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8));
        entity.setF_IsVivreDansMenage(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9));
        entity.setF_RepondantQuiAideId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setDateDebutCollecte(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDateFinCollecte(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDureeSaisie(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setIsContreEnqueteMade(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setCodeAgentRecenceur(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RapportFinal entity, long rowId) {
        entity.setRapportFinalId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RapportFinal entity) {
        if(entity != null) {
            return entity.getRapportFinalId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
