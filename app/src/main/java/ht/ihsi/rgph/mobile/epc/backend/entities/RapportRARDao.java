package ht.ihsi.rgph.mobile.epc.backend.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_rapportrar".
*/
public class RapportRARDao extends AbstractDao<RapportRAR, Long> {

    public static final String TABLENAME = "tbl_rapportrar";

    /**
     * Properties of entity RapportRAR.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RapportId = new Property(0, Long.class, "rapportId", true, "rapportId");
        public final static Property BatimentId = new Property(1, Long.class, "batimentId", false, "batimentId");
        public final static Property LogeId = new Property(2, Long.class, "logeId", false, "logeId");
        public final static Property MenageId = new Property(3, Long.class, "menageId", false, "menageId");
        public final static Property EmigreId = new Property(4, Long.class, "emigreId", false, "emigreId");
        public final static Property DecesId = new Property(5, Long.class, "decesId", false, "decesId");
        public final static Property IndividuId = new Property(6, Long.class, "individuId", false, "individuId");
        public final static Property RapportModuleName = new Property(7, String.class, "rapportModuleName", false, "rapportModuleName");
        public final static Property CodeQuestionStop = new Property(8, String.class, "codeQuestionStop", false, "codeQuestionStop");
        public final static Property VisiteNumber = new Property(9, Short.class, "visiteNumber", false, "visiteNumber");
        public final static Property RaisonActionId = new Property(10, Short.class, "raisonActionId", false, "raisonActionId");
        public final static Property AutreRaisonAction = new Property(11, String.class, "autreRaisonAction", false, "autreRaisonAction");
        public final static Property IsFieldAllFilled = new Property(12, Boolean.class, "isFieldAllFilled", false, "isFieldAllFilled");
        public final static Property DateDebutCollecte = new Property(13, String.class, "dateDebutCollecte", false, "dateDebutCollecte");
        public final static Property DateFinCollecte = new Property(14, String.class, "dateFinCollecte", false, "dateFinCollecte");
        public final static Property DureeSaisie = new Property(15, Integer.class, "dureeSaisie", false, "dureeSaisie");
        public final static Property IsContreEnqueteMade = new Property(16, Boolean.class, "isContreEnqueteMade", false, "isContreEnqueteMade");
        public final static Property CodeAgentRecenceur = new Property(17, String.class, "codeAgentRecenceur", false, "codeAgentRecenceur");
    };


    public RapportRARDao(DaoConfig config) {
        super(config);
    }
    
    public RapportRARDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_rapportrar\" (" + //
                "\"rapportId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: rapportId
                "\"batimentId\" INTEGER," + // 1: batimentId
                "\"logeId\" INTEGER," + // 2: logeId
                "\"menageId\" INTEGER," + // 3: menageId
                "\"emigreId\" INTEGER," + // 4: emigreId
                "\"decesId\" INTEGER," + // 5: decesId
                "\"individuId\" INTEGER," + // 6: individuId
                "\"rapportModuleName\" TEXT," + // 7: rapportModuleName
                "\"codeQuestionStop\" TEXT," + // 8: codeQuestionStop
                "\"visiteNumber\" INTEGER," + // 9: visiteNumber
                "\"raisonActionId\" INTEGER," + // 10: raisonActionId
                "\"autreRaisonAction\" TEXT," + // 11: autreRaisonAction
                "\"isFieldAllFilled\" INTEGER," + // 12: isFieldAllFilled
                "\"dateDebutCollecte\" TEXT," + // 13: dateDebutCollecte
                "\"dateFinCollecte\" TEXT," + // 14: dateFinCollecte
                "\"dureeSaisie\" INTEGER," + // 15: dureeSaisie
                "\"isContreEnqueteMade\" INTEGER," + // 16: isContreEnqueteMade
                "\"codeAgentRecenceur\" TEXT);"); // 17: codeAgentRecenceur
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_rapportrar\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RapportRAR entity) {
        stmt.clearBindings();
 
        Long rapportId = entity.getRapportId();
        if (rapportId != null) {
            stmt.bindLong(1, rapportId);
        }
 
        Long batimentId = entity.getBatimentId();
        if (batimentId != null) {
            stmt.bindLong(2, batimentId);
        }
 
        Long logeId = entity.getLogeId();
        if (logeId != null) {
            stmt.bindLong(3, logeId);
        }
 
        Long menageId = entity.getMenageId();
        if (menageId != null) {
            stmt.bindLong(4, menageId);
        }
 
        Long emigreId = entity.getEmigreId();
        if (emigreId != null) {
            stmt.bindLong(5, emigreId);
        }
 
        Long decesId = entity.getDecesId();
        if (decesId != null) {
            stmt.bindLong(6, decesId);
        }
 
        Long individuId = entity.getIndividuId();
        if (individuId != null) {
            stmt.bindLong(7, individuId);
        }
 
        String rapportModuleName = entity.getRapportModuleName();
        if (rapportModuleName != null) {
            stmt.bindString(8, rapportModuleName);
        }
 
        String codeQuestionStop = entity.getCodeQuestionStop();
        if (codeQuestionStop != null) {
            stmt.bindString(9, codeQuestionStop);
        }
 
        Short visiteNumber = entity.getVisiteNumber();
        if (visiteNumber != null) {
            stmt.bindLong(10, visiteNumber);
        }
 
        Short raisonActionId = entity.getRaisonActionId();
        if (raisonActionId != null) {
            stmt.bindLong(11, raisonActionId);
        }
 
        String autreRaisonAction = entity.getAutreRaisonAction();
        if (autreRaisonAction != null) {
            stmt.bindString(12, autreRaisonAction);
        }
 
        Boolean isFieldAllFilled = entity.getIsFieldAllFilled();
        if (isFieldAllFilled != null) {
            stmt.bindLong(13, isFieldAllFilled ? 1L: 0L);
        }
 
        String dateDebutCollecte = entity.getDateDebutCollecte();
        if (dateDebutCollecte != null) {
            stmt.bindString(14, dateDebutCollecte);
        }
 
        String dateFinCollecte = entity.getDateFinCollecte();
        if (dateFinCollecte != null) {
            stmt.bindString(15, dateFinCollecte);
        }
 
        Integer dureeSaisie = entity.getDureeSaisie();
        if (dureeSaisie != null) {
            stmt.bindLong(16, dureeSaisie);
        }
 
        Boolean isContreEnqueteMade = entity.getIsContreEnqueteMade();
        if (isContreEnqueteMade != null) {
            stmt.bindLong(17, isContreEnqueteMade ? 1L: 0L);
        }
 
        String codeAgentRecenceur = entity.getCodeAgentRecenceur();
        if (codeAgentRecenceur != null) {
            stmt.bindString(18, codeAgentRecenceur);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RapportRAR readEntity(Cursor cursor, int offset) {
        RapportRAR entity = new RapportRAR( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // rapportId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // batimentId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // logeId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // menageId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // emigreId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // decesId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // individuId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rapportModuleName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // codeQuestionStop
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9), // visiteNumber
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10), // raisonActionId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // autreRaisonAction
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isFieldAllFilled
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // dateDebutCollecte
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // dateFinCollecte
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // dureeSaisie
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // isContreEnqueteMade
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // codeAgentRecenceur
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RapportRAR entity, int offset) {
        entity.setRapportId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBatimentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLogeId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMenageId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEmigreId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setDecesId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIndividuId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setRapportModuleName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCodeQuestionStop(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVisiteNumber(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9));
        entity.setRaisonActionId(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10));
        entity.setAutreRaisonAction(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsFieldAllFilled(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setDateDebutCollecte(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDateFinCollecte(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDureeSaisie(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setIsContreEnqueteMade(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setCodeAgentRecenceur(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RapportRAR entity, long rowId) {
        entity.setRapportId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RapportRAR entity) {
        if(entity != null) {
            return entity.getRapportId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
